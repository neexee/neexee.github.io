<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Picky speaker</title>
    <link>https://neexee.github.io/tags/programming/</link>
    <description>Recent content in programming on Picky speaker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Jul 2021 19:31:06 +0700</lastBuildDate>
    
	<atom:link href="https://neexee.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Guideline: Error Handling</title>
      <link>https://neexee.github.io/posts-en/error-handling-manual/</link>
      <pubDate>Mon, 05 Jul 2021 19:31:06 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/error-handling-manual/</guid>
      <description>Consider this classic question, raised in the context of Go and API compatibility:
#golang friends, here&amp;#39;s a fun one
v1: func Process() error { return ErrFoo }
v2: func Process() error { return ErrBar }
Did I break API compatibility? Do I need to bump the major version?
&amp;mdash; ✕✕✕✕✕ (@peterbourgon) July 4, 2021  The responses split 50&amp;frasl;50, but I don&amp;rsquo;t think it should be like this if you are aware of one simple thing:</description>
    </item>
    
    <item>
      <title>Guideline: Error Wrapping in Go</title>
      <link>https://neexee.github.io/posts-en/wrapping-errors-in-go/</link>
      <pubDate>Fri, 02 Jul 2021 21:00:16 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/wrapping-errors-in-go/</guid>
      <description>Imagine a situation. You&amp;rsquo;re having a backend serving music. It has an API level, some domain logic, and storage. You have different kinds of entities in the API (tracks, playlists, and so on) and you need some way to filter them. There&amp;rsquo;s a lot of entities stored in the storage so you have to invent a paging strategy for them.
That&amp;rsquo;s what you probably come up with for client requests:</description>
    </item>
    
    <item>
      <title>Open Source is an Infinitely Scalable Art</title>
      <link>https://neexee.github.io/posts-en/infinite-art/</link>
      <pubDate>Thu, 13 May 2021 18:23:36 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/infinite-art/</guid>
      <description>Open source software development is an infinitely scalable art. All other types of development are not art or not infinitely scalable. It&amp;rsquo;s important to get some things right to make it truly &amp;lsquo;infinitely scalable art&amp;rsquo;.
First of all, quality is always a top priority for good art. Quality makes software predictable. An unpredictable open-source project is just trash. Open source projects should be reference projects in their domain. People rarely reference low-quality projects.</description>
    </item>
    
    <item>
      <title>Leadership in Software Development</title>
      <link>https://neexee.github.io/posts-en/software-leadership/</link>
      <pubDate>Wed, 12 May 2021 13:22:11 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/software-leadership/</guid>
      <description>If in doubt, engineers should do as product managers say. This is because product managers have a wider context. For example, they&amp;rsquo;re aware of the market. They also know priorities on all levels of an organization.
A person having a wider context is a leader by default. A leader can step back sometimes and let others lead. For example, he can ask subordinates to teach him. Subordinates should be careful because teaching the leader without invite may be considered rude and may lead to unpredictable results.</description>
    </item>
    
    <item>
      <title>How to Deal with Documentation</title>
      <link>https://neexee.github.io/posts-en/documentation-problems/</link>
      <pubDate>Mon, 10 May 2021 11:25:56 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/documentation-problems/</guid>
      <description>Any documentation is very advantageous to a spoken word because it scales, it’s searchable, and it can be edited and versioned.
Here I list common problems and solutions for technical documentation:
 It&amp;rsquo;s complicated. Avoid cliffs of understanding, build a ramp for your audience. Split documents into categories and try not to mix them (tutorial, reference, explanation, requirements and so on). Read &amp;ldquo;Elements of style&amp;rdquo; or &amp;ldquo;On writing well&amp;rdquo;. It&amp;rsquo;s big.</description>
    </item>
    
    <item>
      <title>37 Things One Architect Knows</title>
      <link>https://neexee.github.io/posts-en/37-things-one-architect-knows/</link>
      <pubDate>Sat, 02 Jan 2021 15:34:16 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/37-things-one-architect-knows/</guid>
      <description>This is how senior IT architects and CTOs understand change. To me, it&amp;rsquo;s a pretty unusual point of view. It explains the roles and qualities of an architect in a large enterprise, and how to train yourself to achieve those qualities. It includes expert advice on how to explain stuff, draw diagrams, examine architecture, to name a few.
The book is not about systems architecture.
The writing is superb, it&amp;rsquo;s super easy to read and profound at the same time.</description>
    </item>
    
    <item>
      <title>What is SOAR 🛫</title>
      <link>https://neexee.github.io/posts-en/what-is-soar/</link>
      <pubDate>Sat, 10 Oct 2020 17:09:34 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/what-is-soar/</guid>
      <description>Definition In short, it&amp;rsquo;s Security Orchestration, Automation And Response.
SOAR refers to technologies that enable organizations to collect inputs monitored by the security operations team. For example, alerts from the SIEM system and other security technologies — where incident analysis and triage can be performed by leveraging a combination of human and machine power — help define, prioritize and drive standardized incident response activities. SOAR tools allow an organization to define incident analysis and response procedures in a digital workflow format.</description>
    </item>
    
    <item>
      <title>Securing DevOps: Security in the Cloud</title>
      <link>https://neexee.github.io/posts-en/securing-devops/</link>
      <pubDate>Sun, 16 Aug 2020 15:12:10 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/securing-devops/</guid>
      <description>I cannot say anything bad about this book, only good. It&amp;rsquo;s full of quality content and it&amp;rsquo;s a joy to read. Title says for itself, it&amp;rsquo;s a book for DevOps engineer. But I would recommend it to anyone who&amp;rsquo;s just slightly interested in security, clouds or CI/CD. The author builds a CI/CD pipeline throughout first part of the book and explains useful security practices in the rest of the book. It has many real-life examples and many very good explanations.</description>
    </item>
    
    <item>
      <title>A Philosophy of Software Design</title>
      <link>https://neexee.github.io/posts-en/philosophy-of-software-design/</link>
      <pubDate>Sun, 14 Jun 2020 16:47:10 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/philosophy-of-software-design/</guid>
      <description>Nice little book. It could be an eye-opening read for a CS student as it has a lot of good advice on medium and low-level code structure. It&amp;rsquo;s not as useful for a professional programmer, but it could be used for reading for pleasure. It has a couple of concepts with catchy names like &amp;ldquo;define errors out of existence&amp;rdquo; and &amp;ldquo;modules should be deep&amp;rdquo; which I like because they&amp;rsquo;re quite practical and rich.</description>
    </item>
    
    <item>
      <title>Domain-Driven Design: Tackling Complexity in the Heart of Software</title>
      <link>https://neexee.github.io/posts-en/domain-driven-design/</link>
      <pubDate>Sat, 06 Jun 2020 14:49:37 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/domain-driven-design/</guid>
      <description>The book presents a very interesting approach to modeling complex domains, especially with established terms.
The code should look as a sentence said by a domain expert. That’s the core idea. The rest is a lengthy guide to listening to domain experts and mapping their sayings to the code.
Pros:
 Brilliant idea, totally worth knowing I could finally understand most of the content on Fowler’s blog  Cons:
 It’s very hard to follow the author.</description>
    </item>
    
    <item>
      <title>Connection pool &#43; distributed lock = deadlock</title>
      <link>https://neexee.github.io/posts-en/distributed-deadlock/</link>
      <pubDate>Fri, 01 May 2020 12:07:33 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/distributed-deadlock/</guid>
      <description>Sometimes you need strong consistency guarantees and transactions can not provide them. Sure, it&amp;rsquo;s not a good smell, but in this situation you usually don&amp;rsquo;t have a lot of choices.
The easy choice is PostgreSQL advisory lock. But it should be used carefully, especially if you use database connection pools.
Imagine a type LockStorage allowing to create, wait, and release advisory locks.
package main import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; &amp;#34;fmt&amp;#34; ) const pgLockKey = 13 type LockStorage struct { db *sql.</description>
    </item>
    
    <item>
      <title>Guide to Structured Logging in Go</title>
      <link>https://neexee.github.io/posts-en/how-to-structured-logging-in-go/</link>
      <pubDate>Wed, 22 Apr 2020 12:27:15 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/how-to-structured-logging-in-go/</guid>
      <description>There&amp;rsquo;s a lot of structured logging libraries for Go but there&amp;rsquo;s no good guideline on how to use them. This article explains how to get the most of your logs using those libraries.
If you&amp;rsquo;re interested in underlying assumptions for this guideline, check out the previous article What is Structured Logging.
How to populate a context Every logging library has a notion of context. Context groups log entries about a single task.</description>
    </item>
    
    <item>
      <title>What is Structured Logging</title>
      <link>https://neexee.github.io/posts-en/what-is-structured-logging/</link>
      <pubDate>Tue, 21 Apr 2020 12:26:46 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/what-is-structured-logging/</guid>
      <description>Regular logs are hard to get right. Usually, people just want do debug issues using them. Debugging is messy so logs become a mess.
Structured logging allows to clean up the mess a little bit. It even allows draw a graph of an event type from logs in Kibana and similar instruments with ease.
Structured logging is even harder to get right than regular logs. But if you look at ways you can perceive a log, it becomes clear how a good log should look like.</description>
    </item>
    
    <item>
      <title>SQL Performance Explained</title>
      <link>https://neexee.github.io/posts-en/sql-performance-explained/</link>
      <pubDate>Sat, 11 Apr 2020 12:51:04 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/sql-performance-explained/</guid>
      <description>It&amp;rsquo;s short and very well-written. It&amp;rsquo;s the most valuable read on SQL I&amp;rsquo;ve ever seen. The book is available online.
The most important thing for backend developers is &amp;ldquo;Do NOT use OFFSET for pagination&amp;rdquo;.
Powers of indexing:
 The B-Tree traversal. It could be traversed in any direction as leaf nodes are organized in a double linked list. Clustering. Similar data is close, especially if it&amp;rsquo;s an index-only scan.</description>
    </item>
    
    <item>
      <title>Software Architecture in Practice</title>
      <link>https://neexee.github.io/posts-en/architecture-in-practice/</link>
      <pubDate>Wed, 25 Dec 2019 20:42:31 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/architecture-in-practice/</guid>
      <description>The book is very complex. The topic is not easy and writing style of the authors makes it worse.
Some ideas are good but explanations are overly long. It could be much shorter, maybe a medium-sized blog post. I had a feeling that authors tried to cram into it everything they find useful about architecture. Links to aerospace standards (who needs them in a book like this?), clumsy discussion of product lines (an entire chapter is useless) and many more.</description>
    </item>
    
    <item>
      <title>Working with secrets in Ansible</title>
      <link>https://neexee.github.io/posts-en/ansible-secrets/</link>
      <pubDate>Sat, 07 Dec 2019 13:41:10 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/ansible-secrets/</guid>
      <description>Secrets in your yaml-files should be encrypted. The default Ansible method encrypts an entire file, but it&amp;rsquo;s inconvenient in practice. It&amp;rsquo;s much better to encrypt specific variables. It makes Ansible code easier to analyze as you can see encrypted variable name. And it&amp;rsquo;s nice to run your playbook without vault key if the secret variable is unused during play.
Ansible documentation mentions variable-level encryption but offers no oneliner solution.
Visual Studio Code has a nice plugin, ansible-vault-inline.</description>
    </item>
    
    <item>
      <title>Developer Hegemony: The Future of Labor</title>
      <link>https://neexee.github.io/posts-en/developer-hegemony/</link>
      <pubDate>Sun, 01 Dec 2019 12:54:48 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/developer-hegemony/</guid>
      <description>Totally worth your time, especially if you&amp;rsquo;re knowledge worker and you feel like grunt from time to time. I expected the book to be a little bit crazy but it isn&amp;rsquo;t. The entire corporation-driven sector of the IT industry is crazy instead.
This book is an in-depth version of Don&amp;rsquo;t Call Yourself A Programmer article, one of my favourites. And by &amp;ldquo;in-depth&amp;rdquo; I mean really deep dive into the delusion of &amp;ldquo;real programmer&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>The Tangled Web: A Guide to Securing Modern Web Applications</title>
      <link>https://neexee.github.io/posts-en/the-tangled-web/</link>
      <pubDate>Mon, 04 Nov 2019 13:35:10 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/the-tangled-web/</guid>
      <description>Awesome book, joy to read. It&amp;rsquo;s dense, but written in a cheerful tone. The author knows a lot about web security. It&amp;rsquo;s not bound to a narrow set of technologies, frameworks, OSes or browsers. It touches a little bit of everything. But it doesn&amp;rsquo;t make it shallow. I wasn&amp;rsquo;t aware about 90% of information presented in this book. It has no cumbersome and useless terms security charlatans like. It&amp;rsquo;s very practical and full of advice.</description>
    </item>
    
    <item>
      <title>PocketBook Quote Export</title>
      <link>https://neexee.github.io/posts-en/pocketbook-quotes/</link>
      <pubDate>Sat, 05 Oct 2019 20:23:53 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/pocketbook-quotes/</guid>
      <description>It&amp;rsquo;s painful to take out quotes from PocketBook using PocketBook itself. The interface is slow and the default reader app (the best one in my opinion) has no option for bulk imports of quotes.
So I wrote a simple script to extract &amp;amp; transform quotes from the internal PocketBook DB.
The PocketBook database schema   The quote extractor You may want to change the default path of the DB, filter_quote, transform_quote and print_results.</description>
    </item>
    
    <item>
      <title>The beauty of typed Python</title>
      <link>https://neexee.github.io/posts-en/python-typehints/</link>
      <pubDate>Wed, 10 Jul 2019 11:12:50 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/python-typehints/</guid>
      <description>Here&amp;rsquo;s an example of typed Python.
import itertools from typing import Callable, Iterable, List, Tuple, TypeVar A = TypeVar(&amp;#39;A&amp;#39;) B = TypeVar(&amp;#39;B&amp;#39;) def groupby_eager(iterable: Iterable[A], key: Callable[[A], B]) -&amp;gt; List[Tuple[B, List[A]]]: groups = itertools.groupby(sorted(iterable, key=key), key=key) return [ (group_name, list(group)) for group_name, group in groups ]</description>
    </item>
    
    <item>
      <title>Системные вызовы UNIX</title>
      <link>https://neexee.github.io/posts-ru/operating-systems-nsu/</link>
      <pubDate>Fri, 08 Feb 2019 10:48:58 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-ru/operating-systems-nsu/</guid>
      <description>Что это В 2019 году я вёл курс ОС в НГУ. Это шпаргалка с примерными темами для разговора со студентами. Задачки здесь.
К сожалению, у меня не было времени написать шпаргалку для всех лаб, но примерно до десятой добралось мало студентов. И к тому времени они уже представляли, что я могу от них захотеть.
Правила
 Cпрашиваю рандомные вопросы, поэтому лучше знать все ответы знать заранее. Курсивом выделено то, что я гарантированно спрошу у каждого.</description>
    </item>
    
    <item>
      <title>Чем можно заняться первокурснику?</title>
      <link>https://neexee.github.io/posts-ru/informatics-interesting/</link>
      <pubDate>Sat, 22 Dec 2018 11:23:41 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-ru/informatics-interesting/</guid>
      <description>Что это? Это неформальный ответ на вопрос «У меня много лишнего времени, чем можно заняться?». Услышал я его от первокурсника.
Читать материалы курса Темы в табличку я вставлял не для того, чтобы морочить тебе голову. Любая ссылка оттуда очень интересная и полезная (если разбираться в теме не для галочки или в поисках копипасты для слайдов). В моём рассказе с первой пары тоже целая куча ссылок на качественные и интересные ресурсы.</description>
    </item>
    
    <item>
      <title>Release it! Second edition</title>
      <link>https://neexee.github.io/posts-en/release-it/</link>
      <pubDate>Tue, 09 Oct 2018 14:26:47 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/release-it/</guid>
      <description>Faults and cracks:
 Fault. A condition that creates an incorrect internal state in your software. A fault may be due to a latent bug that gets triggered, or it may be due to an unchecked condition at a boundary or external interface. Error. Visibly incorrect behavior. When your trading system suddenly buys ten billion dollars of Pokemon futures, that is an error. Failure. An unresponsive system. When a system doesn’t respond, we say it has failed.</description>
    </item>
    
    <item>
      <title>Вопросы о параллельном программировании</title>
      <link>https://neexee.github.io/posts-ru/operating-systems-multithreading/</link>
      <pubDate>Sun, 23 Sep 2018 10:40:02 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-ru/operating-systems-multithreading/</guid>
      <description>Что это В 2018 году я вёл практикум «Многопоточное программирование» в НГУ. Это шпаргалка с темами для разговора со студентами. Список задач
Лабораторные 1-4  Что такое поток, как он выглядит в памяти? Чем отличаются процесс и поток? Чем отличаются fork() и pthread_create()? Как ОС выделяет процессорное время для потоков и процессов? Планировщик по-разному относится к потокам и процессам? Можно ли сделать свой собственный планировщик потоков (в обход ОС)? Это где-нибудь применяется?</description>
    </item>
    
  </channel>
</rss>