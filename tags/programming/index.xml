<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Picky speaker</title>
    <link>https://neexee.github.io/tags/programming/</link>
    <description>Recent content in programming on Picky speaker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Apr 2020 12:51:04 +0700</lastBuildDate>
    
	<atom:link href="https://neexee.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SQL Performance Explained</title>
      <link>https://neexee.github.io/posts-en/sql-performance-explained/</link>
      <pubDate>Sat, 11 Apr 2020 12:51:04 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/sql-performance-explained/</guid>
      <description>It&amp;rsquo;s short and very well-written. It&amp;rsquo;s the most valuable read on SQL I&amp;rsquo;ve ever seen. The book is available online.
The most important thing for backend developers is &amp;ldquo;Do NOT use OFFSET for pagination&amp;rdquo;.
Powers of indexing:
 The B-Tree traversal. It could be traversed in any direction as leaf nodes are organized in a double linked list. Clustering. Similar data is close, especially if it&amp;rsquo;s an index-only scan.</description>
    </item>
    
    <item>
      <title>Software Architecture in Practice</title>
      <link>https://neexee.github.io/posts-en/architecture-in-practice/</link>
      <pubDate>Wed, 25 Dec 2019 20:42:31 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/architecture-in-practice/</guid>
      <description>The book is very complex. The topic is not easy and writing style of the authors makes it worse.
Some ideas are good but explanations are overly long. It could be much shorter, maybe a medium-sized blog post. I had a feeling that authors tried to cram into it everything they find useful about architecture. Links to aerospace standards (who needs them in a book like this?), clumsy discussion of product lines (an entire chapter is useless) and many more.</description>
    </item>
    
    <item>
      <title>Working with secrets in Ansible</title>
      <link>https://neexee.github.io/posts-en/ansible-secrets/</link>
      <pubDate>Sat, 07 Dec 2019 13:41:10 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/ansible-secrets/</guid>
      <description>Secrets in your yaml-files should be encrypted. The default Ansible method encrypts an entire file, but it&amp;rsquo;s inconvenient in practice. It&amp;rsquo;s much better to encrypt specific variables. It makes Ansible code easier to analyze as you can see encrypted variable name. And it&amp;rsquo;s nice to run your playbook without vault key if the secret variable is unused during play.
Ansible documentation mentions variable-level encryption but offers no oneliner solution.
Visual Studio Code has a nice plugin, ansible-vault-inline.</description>
    </item>
    
    <item>
      <title>Developer Hegemony: The Future of Labor</title>
      <link>https://neexee.github.io/posts-en/developer-hegemony/</link>
      <pubDate>Sun, 01 Dec 2019 12:54:48 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/developer-hegemony/</guid>
      <description>Totally worth your time, especially if you&amp;rsquo;re knowledge worker and you feel like grunt from time to time. I expected the book to be a little bit crazy but it isn&amp;rsquo;t. The entire corporation-driven sector of the IT industry is crazy instead.
This book is an in-depth version of Don&amp;rsquo;t Call Yourself A Programmer article, one of my favourites. And by &amp;ldquo;in-depth&amp;rdquo; I mean really deep dive into the delusion of &amp;ldquo;real programmer&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>The Tangled Web: A Guide to Securing Modern Web Applications</title>
      <link>https://neexee.github.io/posts-en/the-tangled-web/</link>
      <pubDate>Mon, 04 Nov 2019 13:35:10 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/the-tangled-web/</guid>
      <description>Awesome book, joy to read. It&amp;rsquo;s dense, but written in a cheerful tone. The author knows a lot about web security. It&amp;rsquo;s not bound to a narrow set of technologies, frameworks, OSes or browsers. It touches a little bit of everything. But it doesn&amp;rsquo;t make it shallow. I wasn&amp;rsquo;t aware about 90% of information presented in this book. It has no cumbersome and useless terms security charlatans like. It&amp;rsquo;s very practical and full of advice.</description>
    </item>
    
    <item>
      <title>PocketBook Quote Export</title>
      <link>https://neexee.github.io/posts-en/pocketbook-quotes/</link>
      <pubDate>Sat, 05 Oct 2019 20:23:53 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/pocketbook-quotes/</guid>
      <description>It&amp;rsquo;s painful to take out quotes from PocketBook using PocketBook itself. The interface is slow and the default reader app (the best one in my opinion) has no option for bulk imports of quotes.
So I wrote a simple script to extract &amp;amp; transform quotes from the internal PocketBook DB.
The PocketBook database schema   The quote extractor You may want to change the default path of the DB, filter_quote, transform_quote and print_results.</description>
    </item>
    
    <item>
      <title>The beauty of typed Python</title>
      <link>https://neexee.github.io/posts-en/python-typehints/</link>
      <pubDate>Wed, 10 Jul 2019 11:12:50 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/python-typehints/</guid>
      <description>Here&amp;rsquo;s an example of typed Python.
import itertools from typing import Callable, Iterable, List, Tuple, TypeVar A = TypeVar(&amp;#39;A&amp;#39;) B = TypeVar(&amp;#39;B&amp;#39;) def groupby_eager(iterable: Iterable[A], key: Callable[[A], B]) -&amp;gt; List[Tuple[B, List[A]]]: groups = itertools.groupby(sorted(iterable, key=key), key=key) return [ (group_name, list(group)) for group_name, group in groups ]</description>
    </item>
    
    <item>
      <title>Системные вызовы UNIX</title>
      <link>https://neexee.github.io/posts-ru/operating-systems-nsu/</link>
      <pubDate>Fri, 08 Feb 2019 10:48:58 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-ru/operating-systems-nsu/</guid>
      <description>Что это В 2019 году я вёл курс ОС в НГУ. Это шпаргалка с примерными темами для разговора со студентами. Задачки здесь.
К сожалению, у меня не было времени написать шпаргалку для всех лаб, но примерно до десятой добралось мало студентов. И к тому времени они уже представляли, что я могу от них захотеть.
Правила
 Cпрашиваю рандомные вопросы, поэтому лучше знать все ответы знать заранее. Курсивом выделено то, что я гарантированно спрошу у каждого.</description>
    </item>
    
    <item>
      <title>Чем можно заняться первокурснику?</title>
      <link>https://neexee.github.io/posts-ru/informatics-interesting/</link>
      <pubDate>Sat, 22 Dec 2018 11:23:41 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-ru/informatics-interesting/</guid>
      <description>Что это? Это неформальный ответ на вопрос «У меня много лишнего времени, чем можно заняться?». Услышал я его от первокурсника.
Читать материалы курса Темы в табличку я вставлял не для того, чтобы морочить тебе голову. Любая ссылка оттуда очень интересная и полезная (если разбираться в теме не для галочки или в поисках копипасты для слайдов). В моём рассказе с первой пары тоже целая куча ссылок на качественные и интересные ресурсы.</description>
    </item>
    
    <item>
      <title>Release it! Second edition</title>
      <link>https://neexee.github.io/posts-en/release-it/</link>
      <pubDate>Tue, 09 Oct 2018 14:26:47 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/release-it/</guid>
      <description>Faults and cracks:
 Fault. A condition that creates an incorrect internal state in your software. A fault may be due to a latent bug that gets triggered, or it may be due to an unchecked condition at a boundary or external interface. Error. Visibly incorrect behavior. When your trading system suddenly buys ten billion dollars of Pokemon futures, that is an error. Failure. An unresponsive system. When a system doesn’t respond, we say it has failed.</description>
    </item>
    
    <item>
      <title>Вопросы о параллельном программировании</title>
      <link>https://neexee.github.io/posts-ru/operating-systems-multithreading/</link>
      <pubDate>Sun, 23 Sep 2018 10:40:02 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-ru/operating-systems-multithreading/</guid>
      <description>Что это В 2018 году я вёл практикум «Многопоточное программирование» в НГУ. Это шпаргалка с темами для разговора со студентами. Список задач
Лабораторные 1-4  Что такое поток, как он выглядит в памяти? Чем отличаются процесс и поток? Чем отличаются fork() и pthread_create()? Как ОС выделяет процессорное время для потоков и процессов? Планировщик по-разному относится к потокам и процессам? Можно ли сделать свой собственный планировщик потоков (в обход ОС)? Это где-нибудь применяется?</description>
    </item>
    
  </channel>
</rss>