<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Picky speaker</title>
    <link>https://neexee.github.io/tags/python/</link>
    <description>Recent content in python on Picky speaker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Jul 2021 19:31:06 +0700</lastBuildDate><atom:link href="https://neexee.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Guideline: Error Handling</title>
      <link>https://neexee.github.io/posts-en/error-handling-manual/</link>
      <pubDate>Mon, 05 Jul 2021 19:31:06 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/error-handling-manual/</guid>
      <description>Consider this classic question, raised in the context of Go and API compatibility:
#golang friends, here&amp;#39;s a fun one
v1: func Process() error { return ErrFoo }
v2: func Process() error { return ErrBar }
Did I break API compatibility? Do I need to bump the major version?
&amp;mdash; ✕✕✕✕✕ (@peterbourgon) July 4, 2021  The responses split 50/50, but I don&amp;rsquo;t think it should be like this if you are aware of one simple thing:</description>
    </item>
    
    <item>
      <title>PocketBook Quote Export</title>
      <link>https://neexee.github.io/posts-en/pocketbook-quotes/</link>
      <pubDate>Sat, 05 Oct 2019 20:23:53 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/pocketbook-quotes/</guid>
      <description>It&amp;rsquo;s painful to take out quotes from PocketBook using PocketBook itself. The interface is slow and the default reader app (the best one in my opinion) has no option for bulk imports of quotes.
So I wrote a simple script to extract &amp;amp; transform quotes from the internal PocketBook DB.
The PocketBook database schema  The quote extractor You may want to change the default path of the DB, filter_quote, transform_quote and print_results.</description>
    </item>
    
    <item>
      <title>The beauty of typed Python</title>
      <link>https://neexee.github.io/posts-en/python-typehints/</link>
      <pubDate>Wed, 10 Jul 2019 11:12:50 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/python-typehints/</guid>
      <description>Here&amp;rsquo;s an example of typed Python.
import itertools from typing import Callable, Iterable, List, Tuple, TypeVar A = TypeVar(&amp;#39;A&amp;#39;) B = TypeVar(&amp;#39;B&amp;#39;) def groupby_eager(iterable: Iterable[A], key: Callable[[A], B]) -&amp;gt; List[Tuple[B, List[A]]]: groups = itertools.groupby(sorted(iterable, key=key), key=key) return [ (group_name, list(group)) for group_name, group in groups ] </description>
    </item>
    
  </channel>
</rss>
