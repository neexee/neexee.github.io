<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Picky speaker</title>
    <link>https://neexee.github.io/tags/go/</link>
    <description>Recent content in go on Picky speaker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 May 2020 12:07:33 +0700</lastBuildDate>
    
	<atom:link href="https://neexee.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Connection pool &#43; distributed lock = deadlock</title>
      <link>https://neexee.github.io/posts-en/distributed-deadlock/</link>
      <pubDate>Fri, 01 May 2020 12:07:33 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/distributed-deadlock/</guid>
      <description>Sometimes you need strong consistency guarantees and transactions can not provide them. Sure, it&amp;rsquo;s not a good smell, but in this situation you usually don&amp;rsquo;t have a lot of choices.
The easy choice is PostgreSQL advisory lock. But it should be used carefully, especially if you use database connection pools.
Imagine a type LockStorage allowing to create, wait, and release advisory locks.
package main import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; &amp;#34;fmt&amp;#34; ) const pgLockKey = 13 type LockStorage struct { db *sql.</description>
    </item>
    
  </channel>
</rss>