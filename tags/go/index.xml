<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Picky speaker</title>
    <link>https://neexee.github.io/tags/go/</link>
    <description>Recent content in go on Picky speaker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Jul 2021 21:00:16 +0700</lastBuildDate>
    
	<atom:link href="https://neexee.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Wrapping Errors in Go</title>
      <link>https://neexee.github.io/posts-en/wrapping-errors-in-go/</link>
      <pubDate>Mon, 05 Jul 2021 21:00:16 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/wrapping-errors-in-go/</guid>
      <description>Imagine a situation. You&amp;rsquo;re having a backend serving music. It has an API level, some domain logic, and storage. You have different kinds of entities in the API (tracks, playlists, and so on) and you need some way to filter them. There&amp;rsquo;s a lot of entities stored in the storage so you have to invent a paging strategy for them.
That&amp;rsquo;s what you probably come up with for client requests:</description>
    </item>
    
    <item>
      <title>Connection pool &#43; distributed lock = deadlock</title>
      <link>https://neexee.github.io/posts-en/distributed-deadlock/</link>
      <pubDate>Fri, 01 May 2020 12:07:33 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/distributed-deadlock/</guid>
      <description>Sometimes you need strong consistency guarantees and transactions can not provide them. Sure, it&amp;rsquo;s not a good smell, but in this situation you usually don&amp;rsquo;t have a lot of choices.
The easy choice is PostgreSQL advisory lock. But it should be used carefully, especially if you use database connection pools.
Imagine a type LockStorage allowing to create, wait, and release advisory locks.
package main import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; &amp;#34;fmt&amp;#34; ) const pgLockKey = 13 type LockStorage struct { db *sql.</description>
    </item>
    
  </channel>
</rss>