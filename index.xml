<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Picky speaker</title>
    <link>https://neexee.github.io/</link>
    <description>Recent content on Picky speaker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Jul 2019 11:19:36 +0700</lastBuildDate>
    
	<atom:link href="https://neexee.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Philosophy of Software Design</title>
      <link>https://neexee.github.io/posts-en/philosophy-of-software-design/</link>
      <pubDate>Sun, 14 Jun 2020 16:47:10 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/philosophy-of-software-design/</guid>
      <description>Nice little book. It could be an eye-opening read for a CS student as it has a lot of good advice on medium and low-level code structure. It&amp;rsquo;s not as useful for a professional programmer, but it could be used for reading for pleasure. It has a couple of concepts with catchy names like &amp;ldquo;define errors out of existence&amp;rdquo; and &amp;ldquo;modules should be deep&amp;rdquo; which I like because they&amp;rsquo;re quite practical and rich.</description>
    </item>
    
    <item>
      <title>Domain-Driven Design: Tackling Complexity in the Heart of Software</title>
      <link>https://neexee.github.io/posts-en/domain-driven-design/</link>
      <pubDate>Sat, 06 Jun 2020 14:49:37 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/domain-driven-design/</guid>
      <description>The book presents a very interesting approach to modeling complex domains, especially with established terms.
The code should look as a sentence said by a domain expert. That’s the core idea. The rest is a lengthy guide to listening to domain experts and mapping their sayings to the code.
Pros:
 Brilliant idea, totally worth knowing I could finally understand most of the content on Fowler’s blog  Cons:
 It’s very hard to follow the author.</description>
    </item>
    
    <item>
      <title>Connection pool &#43; distributed lock = deadlock</title>
      <link>https://neexee.github.io/posts-en/distributed-deadlock/</link>
      <pubDate>Fri, 01 May 2020 12:07:33 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/distributed-deadlock/</guid>
      <description>Sometimes you need strong consistency guarantees and transactions can not provide them. Sure, it&amp;rsquo;s not a good smell, but in this situation you usually don&amp;rsquo;t have a lot of choices.
The easy choice is PostgreSQL advisory lock. But it should be used carefully, especially if you use database connection pools.
Imagine a type LockStorage allowing to create, wait, and release advisory locks.
package main import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; &amp;#34;fmt&amp;#34; ) const pgLockKey = 13 type LockStorage struct { db *sql.</description>
    </item>
    
    <item>
      <title>Guide to Structured Logging in Go</title>
      <link>https://neexee.github.io/posts-en/how-to-structured-logging-in-go/</link>
      <pubDate>Wed, 22 Apr 2020 12:27:15 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/how-to-structured-logging-in-go/</guid>
      <description>There&amp;rsquo;s a lot of structured logging libraries for Go but there&amp;rsquo;s no good guideline on how to use them. This article explains how to get the most of your logs using those libraries.
If you&amp;rsquo;re interested in underlying assumptions for this guideline, check out the previous article What is Structured Logging.
How to populate a context Every logging library has a notion of context. Context groups log entries about a single task.</description>
    </item>
    
    <item>
      <title>What is Structured Logging</title>
      <link>https://neexee.github.io/posts-en/what-is-structured-logging/</link>
      <pubDate>Tue, 21 Apr 2020 12:26:46 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/what-is-structured-logging/</guid>
      <description>Regular logs are hard to get right. Usually, people just want do debug issues using them. Debugging is messy so logs become a mess.
Structured logging allows to clean up the mess a little bit. It even allows draw a graph of an event type from logs in Kibana and similar instruments with ease.
Structured logging is even harder to get right than regular logs. But if you look at ways you can perceive a log, it becomes clear how a good log should look like.</description>
    </item>
    
    <item>
      <title>How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking – for Students, Academics and Nonfiction Book Writers</title>
      <link>https://neexee.github.io/posts-en/smart-notes/</link>
      <pubDate>Sat, 18 Apr 2020 11:22:39 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/smart-notes/</guid>
      <description>I have mixed feelings about this book. It&amp;rsquo;s well-written on a small scale (pages, chapters) but the overall structure is a mystery to me.
Did I find a way how to organize a mess in my notes? Not exactly, but I&amp;rsquo;ve found some good hints.
Good bits:
 GTD doesn&amp;rsquo;t work for non-linear writing. Academic writing is non-linear. I was taught otherwise. Organize your notes around the context in which they&amp;rsquo;re going to be useful.</description>
    </item>
    
    <item>
      <title>SQL Performance Explained</title>
      <link>https://neexee.github.io/posts-en/sql-performance-explained/</link>
      <pubDate>Sat, 11 Apr 2020 12:51:04 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/sql-performance-explained/</guid>
      <description>It&amp;rsquo;s short and very well-written. It&amp;rsquo;s the most valuable read on SQL I&amp;rsquo;ve ever seen. The book is available online.
The most important thing for backend developers is &amp;ldquo;Do NOT use OFFSET for pagination&amp;rdquo;.
Powers of indexing:
 The B-Tree traversal. It could be traversed in any direction as leaf nodes are organized in a double linked list. Clustering. Similar data is close, especially if it&amp;rsquo;s an index-only scan.</description>
    </item>
    
    <item>
      <title>Surely You&#39;re Joking, Mr. Feynman!</title>
      <link>https://neexee.github.io/posts-en/joking-feynman/</link>
      <pubDate>Sun, 26 Jan 2020 18:36:44 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/joking-feynman/</guid>
      <description>If you like listen to long stories of your friends, give it a try.
I expected something different.
First of all, it shouldn&amp;rsquo;t be a book. The writing is terrible. It could not be fixed by editing because almost an entire book is based on recorded audio conversations of Feynman and his friend.
I was agonizing for the first 100 pages or so. It was too narcissistic. Maybe it&amp;rsquo;s okay, he was a kid and teenager at this time.</description>
    </item>
    
    <item>
      <title>The Essential Alan Watts</title>
      <link>https://neexee.github.io/posts-en/essential-watts/</link>
      <pubDate>Wed, 15 Jan 2020 16:51:07 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/essential-watts/</guid>
      <description>A collection of masterpieces. Watts discusses important concepts and he goes pretty deep. Important concepts are time, Universe, God, work, ego and death. There&amp;rsquo;s no dogmatic bullshit, just a call to try to see things differently.
Sadly, I already knew most of the content from other sources. I wish I could erase my memory and read it as a completely mind-blowing book. Examples of main ideas? Past doesn&amp;rsquo;t exist. You don&amp;rsquo;t exist.</description>
    </item>
    
    <item>
      <title>How to Win Friends and Influence People</title>
      <link>https://neexee.github.io/posts-en/how-to-win-friends/</link>
      <pubDate>Sat, 11 Jan 2020 21:27:44 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/how-to-win-friends/</guid>
      <description>It has great overview of techniques for non-toxic conversations but it&amp;rsquo;s a little bit dangerous and shallow. I was walking around it for years and was afraid it&amp;rsquo;s a collection of insecure tricks for used car salesmans. It&amp;rsquo;s easy to read and there&amp;rsquo;s a lot of examples from lives of famous (and not-so-famous) people. So it&amp;rsquo;s a worthy read if you just want to entertain yourself.
What do I mean by dangerous?</description>
    </item>
    
    <item>
      <title>Software Architecture in Practice</title>
      <link>https://neexee.github.io/posts-en/architecture-in-practice/</link>
      <pubDate>Wed, 25 Dec 2019 20:42:31 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/architecture-in-practice/</guid>
      <description>The book is very complex. The topic is not easy and writing style of the authors makes it worse.
Some ideas are good but explanations are overly long. It could be much shorter, maybe a medium-sized blog post. I had a feeling that authors tried to cram into it everything they find useful about architecture. Links to aerospace standards (who needs them in a book like this?), clumsy discussion of product lines (an entire chapter is useless) and many more.</description>
    </item>
    
    <item>
      <title>Working with secrets in Ansible</title>
      <link>https://neexee.github.io/posts-en/ansible-secrets/</link>
      <pubDate>Sat, 07 Dec 2019 13:41:10 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/ansible-secrets/</guid>
      <description>Secrets in your yaml-files should be encrypted. The default Ansible method encrypts an entire file, but it&amp;rsquo;s inconvenient in practice. It&amp;rsquo;s much better to encrypt specific variables. It makes Ansible code easier to analyze as you can see encrypted variable name. And it&amp;rsquo;s nice to run your playbook without vault key if the secret variable is unused during play.
Ansible documentation mentions variable-level encryption but offers no oneliner solution.
Visual Studio Code has a nice plugin, ansible-vault-inline.</description>
    </item>
    
    <item>
      <title>Developer Hegemony: The Future of Labor</title>
      <link>https://neexee.github.io/posts-en/developer-hegemony/</link>
      <pubDate>Sun, 01 Dec 2019 12:54:48 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/developer-hegemony/</guid>
      <description>Totally worth your time, especially if you&amp;rsquo;re knowledge worker and you feel like grunt from time to time. I expected the book to be a little bit crazy but it isn&amp;rsquo;t. The entire corporation-driven sector of the IT industry is crazy instead.
This book is an in-depth version of Don&amp;rsquo;t Call Yourself A Programmer article, one of my favourites. And by &amp;ldquo;in-depth&amp;rdquo; I mean really deep dive into the delusion of &amp;ldquo;real programmer&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Basic Economics: A Citizen&#39;s Guide to the Economy</title>
      <link>https://neexee.github.io/posts-en/basic-economics/</link>
      <pubDate>Sun, 24 Nov 2019 11:20:08 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/basic-economics/</guid>
      <description>Useful read. I no longer believe those who talk about things selling &amp;ldquo;below their real value&amp;rdquo; or about how terrible it is for the United States to be &amp;ldquo;a debtor nation&amp;rdquo;. I&amp;rsquo;m skeptic about government programs to make this or that &amp;ldquo;affordable&amp;rdquo;. Same skepticism goes for statements and statistics about &amp;ldquo;the rich&amp;rdquo; and &amp;ldquo;the poor&amp;rdquo;. Same with notion of &amp;ldquo;greed&amp;rdquo; of capitalists. It&amp;rsquo;s not mysterious why so many places with rent control laws also have housing shortages.</description>
    </item>
    
    <item>
      <title>The Tangled Web: A Guide to Securing Modern Web Applications</title>
      <link>https://neexee.github.io/posts-en/the-tangled-web/</link>
      <pubDate>Mon, 04 Nov 2019 13:35:10 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/the-tangled-web/</guid>
      <description>Awesome book, joy to read. It&amp;rsquo;s dense, but written in a cheerful tone. The author knows a lot about web security. It&amp;rsquo;s not bound to a narrow set of technologies, frameworks, OSes or browsers. It touches a little bit of everything. But it doesn&amp;rsquo;t make it shallow. I wasn&amp;rsquo;t aware about 90% of information presented in this book. It has no cumbersome and useless terms security charlatans like. It&amp;rsquo;s very practical and full of advice.</description>
    </item>
    
    <item>
      <title>PocketBook Quote Export</title>
      <link>https://neexee.github.io/posts-en/pocketbook-quotes/</link>
      <pubDate>Sat, 05 Oct 2019 20:23:53 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/pocketbook-quotes/</guid>
      <description>It&amp;rsquo;s painful to take out quotes from PocketBook using PocketBook itself. The interface is slow and the default reader app (the best one in my opinion) has no option for bulk imports of quotes.
So I wrote a simple script to extract &amp;amp; transform quotes from the internal PocketBook DB.
The PocketBook database schema   The quote extractor You may want to change the default path of the DB, filter_quote, transform_quote and print_results.</description>
    </item>
    
    <item>
      <title>Seeking Wisdom: From Darwin To Munger</title>
      <link>https://neexee.github.io/posts-en/seeking-wisdom/</link>
      <pubDate>Thu, 03 Oct 2019 21:18:43 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/seeking-wisdom/</guid>
      <description>It&amp;rsquo;s a compilation of ideas from other books about thought process debugging. At least the first half. Writing is concise. There&amp;rsquo;s a lot of deep quotes.
The second half was mostly about Buffet&amp;rsquo;s and Munger&amp;rsquo;s thoughts on investment bullshit so it was pretty useless.
&amp;ldquo;I read it in the New England Journal of Medicine, so it must be correct&amp;rdquo;.
Names and reputation influence us. And symbols of power or status like titles, possessions, rank, uniforms, or a nice suit and tie.</description>
    </item>
    
    <item>
      <title>Antifragile</title>
      <link>https://neexee.github.io/posts-en/antifragile/</link>
      <pubDate>Sun, 08 Sep 2019 14:26:47 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/antifragile/</guid>
      <description>Awesome book. It alleviated some of my scariest anxieties.
Future anxiety. Before I read it I thought I would miss something new if I&amp;rsquo;m not going to read about new shiny things every day. Turns out, new developments are not that important. People cannot solve the same problems for centuries, so it&amp;rsquo;s better to read classics to anticipate future.
Health anxiety. Health is complex. Doctors don&amp;rsquo;t know much about it and almost always create problems on the long run.</description>
    </item>
    
    <item>
      <title>The beauty of typed Python</title>
      <link>https://neexee.github.io/posts-en/python-typehints/</link>
      <pubDate>Wed, 10 Jul 2019 11:12:50 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/python-typehints/</guid>
      <description>Here&amp;rsquo;s an example of typed Python.
import itertools from typing import Callable, Iterable, List, Tuple, TypeVar A = TypeVar(&amp;#39;A&amp;#39;) B = TypeVar(&amp;#39;B&amp;#39;) def groupby_eager(iterable: Iterable[A], key: Callable[[A], B]) -&amp;gt; List[Tuple[B, List[A]]]: groups = itertools.groupby(sorted(iterable, key=key), key=key) return [ (group_name, list(group)) for group_name, group in groups ]</description>
    </item>
    
    <item>
      <title>Системные вызовы UNIX</title>
      <link>https://neexee.github.io/posts-ru/operating-systems-nsu/</link>
      <pubDate>Fri, 08 Feb 2019 10:48:58 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-ru/operating-systems-nsu/</guid>
      <description>Что это В 2019 году я вёл курс ОС в НГУ. Это шпаргалка с примерными темами для разговора со студентами. Задачки здесь.
К сожалению, у меня не было времени написать шпаргалку для всех лаб, но примерно до десятой добралось мало студентов. И к тому времени они уже представляли, что я могу от них захотеть.
Правила
 Cпрашиваю рандомные вопросы, поэтому лучше знать все ответы знать заранее. Курсивом выделено то, что я гарантированно спрошу у каждого.</description>
    </item>
    
    <item>
      <title>How to: English</title>
      <link>https://neexee.github.io/posts-ru/english/</link>
      <pubDate>Tue, 05 Feb 2019 11:23:41 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-ru/english/</guid>
      <description>TLDR Practice! Practice! Practice! Make a goal to study English 3+ hours per week directly and 6+ hours per week indirectly (watching videos or reading).
What matters Does matter:
 Vocabulary. 20+ thousands of words is enough. You can measure it here. Practice. Bilingual proficiency will come naturally if you&amp;rsquo;re in constant touch with the foreign language for 10+ years.  Doesn&amp;rsquo;t matter:
 Grammar. It just doesn&amp;rsquo;t stick until you start to consume almost all content in English.</description>
    </item>
    
    <item>
      <title>Чем можно заняться первокурснику?</title>
      <link>https://neexee.github.io/posts-ru/informatics-interesting/</link>
      <pubDate>Sat, 22 Dec 2018 11:23:41 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-ru/informatics-interesting/</guid>
      <description>Что это? Это неформальный ответ на вопрос «У меня много лишнего времени, чем можно заняться?». Услышал я его от первокурсника.
Читать материалы курса Темы в табличку я вставлял не для того, чтобы морочить тебе голову. Любая ссылка оттуда очень интересная и полезная (если разбираться в теме не для галочки или в поисках копипасты для слайдов). В моём рассказе с первой пары тоже целая куча ссылок на качественные и интересные ресурсы.</description>
    </item>
    
    <item>
      <title>The Visual Display of Quantitative Information</title>
      <link>https://neexee.github.io/posts-en/the-visual-display/</link>
      <pubDate>Sun, 11 Nov 2018 11:20:08 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/the-visual-display/</guid>
      <description>I decided to read it because at the time of reading I had to draw a lot statistical graphs at my work and I had no idea how to do it in a best possible way. I&amp;rsquo;ve read it and convinced myself even more about facts I already knew:
 Piecharts are worthless and misleading. You need to note everything on your graph, especially axes. Your graphs shouldn&amp;rsquo;t be too smart.</description>
    </item>
    
    <item>
      <title>Release it! Second edition</title>
      <link>https://neexee.github.io/posts-en/release-it/</link>
      <pubDate>Tue, 09 Oct 2018 14:26:47 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-en/release-it/</guid>
      <description>Faults and cracks:
 Fault. A condition that creates an incorrect internal state in your software. A fault may be due to a latent bug that gets triggered, or it may be due to an unchecked condition at a boundary or external interface. Error. Visibly incorrect behavior. When your trading system suddenly buys ten billion dollars of Pokemon futures, that is an error. Failure. An unresponsive system. When a system doesn’t respond, we say it has failed.</description>
    </item>
    
    <item>
      <title>Вопросы о параллельном программировании</title>
      <link>https://neexee.github.io/posts-ru/operating-systems-multithreading/</link>
      <pubDate>Sun, 23 Sep 2018 10:40:02 +0700</pubDate>
      
      <guid>https://neexee.github.io/posts-ru/operating-systems-multithreading/</guid>
      <description>Что это В 2018 году я вёл практикум «Многопоточное программирование» в НГУ. Это шпаргалка с темами для разговора со студентами. Список задач
Лабораторные 1-4  Что такое поток, как он выглядит в памяти? Чем отличаются процесс и поток? Чем отличаются fork() и pthread_create()? Как ОС выделяет процессорное время для потоков и процессов? Планировщик по-разному относится к потокам и процессам? Можно ли сделать свой собственный планировщик потоков (в обход ОС)? Это где-нибудь применяется?</description>
    </item>
    
  </channel>
</rss>